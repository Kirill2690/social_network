{"version":3,"file":"static/js/119.e1d4c2c2.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/common/form/FormsControls.module.css?3c52","components/common/form/FormsControls.tsx","webpack://samurai-way/./src/components/profile/Profive.module.css?1e35","webpack://samurai-way/./src/components/profile/MyPost/ProfileInfo/ProfileInfo.module.css?0495","../node_modules/@ant-design/icons-svg/es/asn/DownloadOutlined.js","../node_modules/@ant-design/icons/es/icons/DownloadOutlined.js","webpack://samurai-way/./src/components/profile/MyPost/ProfileInfo/ProfileStatusWithHook.module.css?849b","components/profile/MyPost/ProfileInfo/ProfileStatusWithHooks.tsx","components/profile/MyPost/ProfileInfo/ProfileDataForm.tsx","components/profile/MyPost/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/profile/MyPost/MyPosts.module.css?8c73","webpack://samurai-way/./src/components/profile/MyPost/Post/Post.module.css?95fc","components/profile/MyPost/Post/Post.tsx","components/profile/MyPost/MyPosts.tsx","components/profile/MyPost/MyPostContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__b2Il2\",\"error\":\"FormsControls_error__fjfCp\"};","import React from 'react';\nimport styles from './FormsControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\n\ntype FormControlPropsType = {\n    children?: React.ReactNode\n    meta: WrappedFieldMetaProps;\n}\n\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error},children}) => {\n\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n    return (\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n    return (\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n)","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Profive_container__h3fL0\"};","// extracted by mini-css-extract-plugin\nexport default {\"description_block\":\"ProfileInfo_description_block__EPvmn\",\"profileImg\":\"ProfileInfo_profileImg__BGrKt\",\"avatar\":\"ProfileInfo_avatar__0PXHw\",\"mainPhoto\":\"ProfileInfo_mainPhoto__w1ivQ\",\"contact\":\"ProfileInfo_contact__cKB6Y\"};","// This icon file is generated automatically.\nvar DownloadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"download\", \"theme\": \"outlined\" };\nexport default DownloadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownloadOutlined = function DownloadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownloadOutlinedSvg\n  }));\n};\n\nDownloadOutlined.displayName = 'DownloadOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownloadOutlined);","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatusWithHook_status__l6D1D\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\nimport {Input} from 'antd';\nimport s from './ProfileStatusWithHook.module.css'\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={s.status}>\n            {!editMode &&\n                < div>\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}> {props.status || '-----'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <Input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;","import {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {ProfileType} from \"../../ProfileContainer\";\nimport {Button} from \"antd\";\nimport s from './ProfileInfo.module.css'\nimport {createField, Input, Textarea} from \"../../../common/form/FormsControls\";\n\nconst ProfileDataForm = (props: InjectedFormProps<ProfileType>) => {\n    const {handleSubmit, initialValues, error} = props\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <Button type=\"default\" shape=\"round\" onClick={handleSubmit}>save</Button>\n            {error && <div className={s.formSummaryError}>\n                {error}\n            </div>}\n        </div>\n        <div>\n            <b>Full name: </b> {createField('Full name', 'fullName', [], Input)}\n        </div>\n        <div>\n            <b>Looking For A Job: </b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\n        </div>\n\n        <div>\n            <b>My professional\n                skills: </b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\n        </div>\n        <div>\n            <b>About me: </b> {createField('About me', 'aboutMe', [], Textarea)}\n        </div>\n        <div>\n            <b>Contacts: </b> {Object.keys(initialValues.contacts ?? {}).map(key => {\n            return <div key={key} className={s.contact}>\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","import React, {useRef, useState} from \"react\";\nimport {ContactsType, ProfileType} from \"../../ProfileContainer\";\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from \"../../../common/preloader/Preloader\";\nimport {Button} from \"antd\";\nimport {DownloadOutlined} from \"@ant-design/icons\";\nimport userPhoto from '../../../../assets/images/userPhoto.png';\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\n\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                         profile,\n                                                         status,\n                                                         updateStatus,\n                                                         isOwner,\n                                                         savePhoto,\n                                                         saveProfile\n                                                     }) => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    const [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: { target: any }) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType | null) => {\n        saveProfile(formData)\n        setEditMode(false)\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <div className={s.avatar}>\n                    <img src={profile.photos?.large || userPhoto} className={s.mainPhoto} alt={'large avatar'}/>\n                </div>\n                <div>\n                    <Button\n                        type=\"default\"\n                        shape=\"circle\"\n                        icon={<DownloadOutlined/>}\n                        onClick={() => ref.current?.click()}\n                    />\n                </div>\n                {isOwner &&\n                    <input\n                        type={'file'}\n                        onChange={onMainPhotoSelected}\n                        ref={ref}\n                        style={{display: 'none'}}\n                    />\n                }\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {\n                        setEditMode(true)\n                    }} profile={profile} isOwner={isOwner}/>}\n            </div>\n        </div>\n    );\n};\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string\n}\n\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div>\n            <Button type=\"default\" shape=\"round\" onClick={goToEditMode}>edit</Button>\n        </div>}\n        <div>\n            <b>Full name: </b> {profile.fullName}\n        </div>\n        <div>\n            <b>Looking For A Job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\n        </div>\n        {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills: </b> {profile.lookingForAJobDescription}\n            </div>}\n        <div>\n            <b>About Me: </b> {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts: </b> {profile.contacts && Object.keys(profile.contacts).map(key => {\n\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\n}\n\n","// extracted by mini-css-extract-plugin\nexport default {\"posts_block\":\"MyPosts_posts_block__gKX2+\",\"posts\":\"MyPosts_posts__AsSmx\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__r+3UZ\"};","import React from 'react';\nimport s from \"./Post.module.css\";\n\nexport type PostType = {\n    id: number,\n    message: string,\n    likesCount: number,\n    img: string\n};\n\nconst Post = (props: PostType) => {\n    return (\n        <div className={s.item} >\n            <img src={props.img} alt={'ava'}/>\n            {props.message}\n            <div>\n                <span>like</span>{props.likesCount}\n            </div>\n\n        </div>\n    );\n};\n\nexport default Post;","import React from 'react';\nimport s from \"./MyPosts.module.css\";\nimport Post, {PostType} from \"./Post/Post\";\n\n\n\ntype MyPostsType = {\n    posts: Array<PostType>\n    messageForNewPost: string\n    addPost:(postMessage: string)=>void\n}\n\n\nconst MyPosts = (props: MyPostsType) => {\n    let postsElement = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}\n                                                  img={p.img} id={p.id}/>)\n\n\n\n    return (\n        <div className={s.posts_block}>\n            <h3>My post</h3>\n            <div>\n                <div>\n                    <textarea value={props.messageForNewPost} placeholder={'Enter you post'}/>\n                </div>\n                <div>\n                    <button onClick={()=>alert(props.messageForNewPost)}>Add post</button>\n                </div>\n            </div>\n            <div className={s.posts}>\n                {postsElement}\n            </div>\n        </div>\n    );\n};\n\nexport default MyPosts;","import {PostType} from \"./Post/Post\";\nimport {RootStateType} from \"../../../redux/redux-store\";\nimport {Dispatch} from \"redux\";\nimport {addPost} from \"../../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport MyPosts from \"./MyPosts\";\n\ntype mapStateToPropsType = {\n    posts: Array<PostType>\n    messageForNewPost: string,\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        messageForNewPost: state.profilePage.messageForNewPost\n    } as mapStateToPropsType\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPost(newPostText))\n        },\n    }\n}\n\nexport const MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n","import React from 'react';\nimport s from \"./Profive.module.css\";\nimport {ProfileType} from \"./ProfileContainer\";\nimport {ProfileInfo} from \"./MyPost/ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPost/MyPostContainer\";\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\nexport const Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={s.container}>\n            <ProfileInfo savePhoto={props.savePhoto}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         status={props.status}\n                         saveProfile={props.saveProfile}\n                         updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}","import {compose} from \"redux\";\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport React from \"react\";\nimport {Profile} from \"./Profile\";\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\n\nexport type ProfileType = {\n    aboutMe?: string\n    contacts: ContactsType\n    lookingForAJob?: boolean\n    lookingForAJobDescription?: string\n    fullName?: string\n    userId?: number\n    photos?: PhotosType\n}\n\nexport type ContactsType = {\n    facebook: string\n    website: string\n    vk: string\n    twitter: string\n    instagram: string\n    youtube: string\n    github: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number | null) => void\n    getStatus: (status: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: string | undefined = this.props.match.params.userId;\n        if (!userId) {\n\n            userId = this.props.authorizedUserId?.toString()\n            if (!userId) {\n                return this.props.history.push('/login');\n            }\n        }\n\n\n        this.props.getUserProfile(Number(userId))\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\n            this.refreshProfile()\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n});\n\nexport default compose<React.ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, RootStateType>(mapStateToProps, {\n        getUserProfile,\n        getStatus,\n        updateStatus,\n        savePhoto,\n        saveProfile,\n    }),\n    withRouter,\n    withAuthRedirect\n)(ProfileContainer);","import {Redirect} from \"react-router-dom\";\nimport {RootStateType} from \"../redux/redux-store\";\nimport {Component, ComponentType} from \"react\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T extends Component>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","props","text","Field","validate","DownloadOutlined","ref","React","AntdIcon","_objectSpread","icon","DownloadOutlinedSvg","displayName","useState","editMode","setEditMode","status","setStatus","useEffect","s","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","initialValues","onSubmit","type","shape","onClick","Object","keys","contacts","map","key","ProfileInfo","profile","isOwner","savePhoto","saveProfile","useRef","Preloader","src","photos","large","userPhoto","alt","current","click","target","files","length","style","display","formData","ProfileData","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","img","message","likesCount","postsElement","posts","p","id","messageForNewPost","alert","MyPostsContainer","connect","state","profilePage","dispatch","addPost","newPostText","MyPosts","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","Number","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","to"],"sourceRoot":""}