{"version":3,"file":"static/js/152.0fe45b9f.chunk.js","mappings":"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","sources":["components/common/forms/FormsControls.tsx","webpack://my_social_network/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/DialogItem/DialogItem.tsx","components/dialogs/Message/Message.tsx","webpack://my_social_network/./src/components/dialogs/AddMessageForm/AddMessageForm.module.css?31bd","components/dialogs/AddMessageForm/AddMessageForm.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://my_social_network/./src/components/common/forms/FormControls.module.css?8e07"],"sourcesContent":["import React from 'react';\nimport styles from './FormControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps,\n    children?: React.ReactNode\n\n}\n\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n\n    return (\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n    return (\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n)","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__ODBx3\",\"dialogsItems\":\"Dialogs_dialogsItems__BGH7H\",\"messages\":\"Dialogs_messages__DV45A\",\"message\":\"Dialogs_message__+F7SU\",\"avatar\":\"Dialogs_avatar__Omn3l\",\"name\":\"Dialogs_name__aMoxF\"};","import React from 'react';\nimport styles from './../Dialogs.module.css'\nimport {NavLink} from 'react-router-dom';\n\nexport type DialogsType = {\n    id: number\n    name: string\n    avatar: string\n}\n\nconst DialogItem = (props: DialogsType) => {\n    let path = '/dialogs/' + props.id\n    return (\n        <div className={styles.dialog + ' ' + styles.active}>\n            <img className={styles.avatar} src={props.avatar} alt={'avatar'}/>\n            <NavLink to={path}><span className={styles.name}>{props.name}</span></NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem;","import React from 'react';\nimport styles from './../Dialogs.module.css'\n\nexport type MessageType = {\n    id: string\n    message: string\n}\n\nconst Message = (props: MessageType) => {\n    return (\n        <div className={styles.message}>\n            {props.message}\n        </div>\n    )\n}\n\nexport default Message;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AddMessageForm_container__4zHV2\"};","import {maxLengthCreator, required} from '../../../utils/validators/validators';\nimport React, {FC} from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Textarea} from '../../common/forms/FormsControls';\nimport styles from './AddMessageForm.module.css'\n\ntype DialogsFormPropsType = {\n    newMessageBody: string\n}\nconst maxLength50 = maxLengthCreator(50);\nconst AddMessageForm: FC<InjectedFormProps<DialogsFormPropsType>> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={styles.container}>\n                <Field component={Textarea}\n                       name={'newMessageBody'}\n                       validate={[required, maxLength50]}\n                       placeholder={'Enter your message'}\n                       row={3}\n                />\n\n                    <button  type={'submit'}>Send</button>\n            </div>\n        </form>\n    )\n}\nexport const AddMessageFormRedux = reduxForm<DialogsFormPropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\nimport styles from './Dialogs.module.css'\nimport DialogItem, {DialogsType} from './DialogItem/DialogItem';\nimport Message, {MessageType} from './Message/Message';\nimport {Redirect} from 'react-router-dom';\nimport {AddMessageFormRedux} from './AddMessageForm/AddMessageForm';\n\ntype DialogsPageType = {\n    dialogs: Array<DialogsType>\n    messages: Array<MessageType>\n    newMessageBody: string\n    sendMessage: (values: string) => void\n    isAuth: boolean\n}\n\nconst Dialogs = (props: DialogsPageType) => {\n\n    let dialogsElements = props.dialogs.map(d => <DialogItem key={d.id} name={d.name} id={d.id} avatar={d.avatar}/>);\n\n    let messagesElements = props.messages.map(m => <Message key={m.id} id={m.id} message={m.message}/>);\n\n    let addNewMessage = (values: { newMessageBody: string }) => {\n        props.sendMessage(values.newMessageBody);\n        values.newMessageBody = '';\n    }\n\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\n\n    return (\n        <div className={styles.dialogs}>\n            <div className={styles.dialogsItems}>\n                {dialogsElements}\n            </div>\n            <div className={styles.messages}>\n                <div>{messagesElements}</div>\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\n            </div>\n        </div>\n    );\n};\n\n\nexport default Dialogs;","import {sendMessageAC} from '../../redux/dialogs-reducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport {DialogsType} from './DialogItem/DialogItem';\nimport {MessageType} from './Message/Message';\nimport React from 'react';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogsType>,\n    messages: Array<MessageType>,\n    isAuth: boolean,\n}\n\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void,\n}\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps),\n)(Dialogs);","import React, {Component,ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../redux/redux-store';\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T extends Component>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","export const required = (value: string) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__nfj+-\",\"error\":\"FormControls_error__uAfpp\",\"formSummaryError\":\"FormControls_formSummaryError__nMr6e\",\"title\":\"FormControls_title__QTzt1\"};"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","props","text","validate","path","id","src","avatar","alt","to","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","required","row","type","dialogsElements","dialogs","map","d","messagesElements","messages","m","isAuth","values","sendMessage","newMessageBody","compose","withAuthRedirect","connect","state","dialogsPage","auth","dispatch","sendMessageAC","Dialogs","mapStateToProps","Component","value","maxLength","length"],"sourceRoot":""}