{"version":3,"file":"static/js/246.a8cb9c43.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/common/form/FormsControls.module.css?3c52","components/common/form/FormsControls.tsx","utils/validator/validators.tsx","webpack://samurai-way/./src/components/dialogs/Dialogs.module.css?04a9","components/dialogs/Dialog/Dialog.tsx","components/dialogs/Message/Message.tsx","components/dialogs/addMessageForm/AddMessageForm.module.css","components/dialogs/addMessageForm/AddMessageForm.tsx","components/dialogs/Dialogs.tsx","components/dialogs/DialogsContainer.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__b2Il2\",\"error\":\"FormsControls_error__fjfCp\"};","import React from 'react';\nimport styles from './FormsControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\n\ntype FormControlPropsType = {\n    children?: React.ReactNode\n    meta: WrappedFieldMetaProps;\n}\n\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error},children}) => {\n\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n    return (\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n    return (\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n)","export const required = (value: string) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs_items\":\"Dialogs_dialogs_items__WCgzV\",\"active\":\"Dialogs_active__wd+SJ\",\"dialogs\":\"Dialogs_dialogs__ODBx3\",\"dialog\":\"Dialogs_dialog__kKoha\",\"messages\":\"Dialogs_messages__DV45A\",\"message\":\"Dialogs_message__+F7SU\",\"avatar\":\"Dialogs_avatar__Omn3l\"};","import React from 'react';\nimport s from './../Dialogs.module.css'\nimport {NavLink} from \"react-router-dom\";\n\nexport type DialogType = {\n    name: string,\n    id: number,\n    avatar:string\n}\nconst Dialog = (props: DialogType) => {\n    let path = '/dialogs/' + props.id;\n    return (\n        <div className={s.dialog + ' ' + s.active}>\n            <img className={s.avatar} src={props.avatar} alt={'avatar'}/>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default Dialog;\n","import React from 'react';\nimport s from './../Dialogs.module.css'\n\n\nexport type MessageType = {\n    id: string,\n    message: string\n\n};\n\nconst Messages = (props: MessageType) => {\n    return (\n        <div className={s.message}>\n            {props.message}\n        </div>\n    )\n\n}\n\n\nexport default Messages;\n","// extracted by mini-css-extract-plugin\nexport default {};","import {Button} from \"antd\";\nimport s from './AddMessageForm.module.css'\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {FC} from \"react\";\nimport {Textarea} from \"../../common/form/FormsControls\";\nimport {maxLengthCreator, required} from \"../../../utils/validator/validators\";\n\ntype DialogsFormPropsType = {\n    newMessageBody: string\n}\nconst maxLength50 = maxLengthCreator(50);\nconst AddMessageForm: FC<InjectedFormProps<DialogsFormPropsType>> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={s.container}>\n                <Field component={Textarea}\n                       name={'newMessageBody'}\n                       validate={[required, maxLength50]}\n                       placeholder={'Enter your message'}\n                       row={3}\n                />\n                <div>\n                    <Button type={'default'} shape={'round'} htmlType={'submit'}>Send</Button>\n                </div>\n            </div>\n        </form>\n    )\n}\nexport const AddMessageFormRedux = reduxForm<DialogsFormPropsType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\nimport s from './Dialogs.module.css'\nimport Dialog, {DialogType} from \"./Dialog/Dialog\";\nimport Message, {MessageType} from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport {AddMessageFormRedux} from \"./addMessageForm/AddMessageForm\";\n\nexport type DialogsType = {\n    dialogs: Array<DialogType>\n    message:Array<MessageType>\n    newMessageBody:string\n    sendMessage: (values: string) => void\n    isAuth: boolean\n\n}\n\n\n\nconst Dialogs = (props: DialogsType) => {\n\n    let dialogsElements = props.dialogs.map(d => (<Dialog name={d.name} id={d.id} key={d.id} avatar={d.avatar}/>))\n\n    let messagesElements = props.message.map(m => (<Message message={m.message} key={m.id} id={m.id}/>))\n    let addMessage = (values: { newMessageBody: string }) => {\n        props.sendMessage(values.newMessageBody);\n        values.newMessageBody = '';\n    }\n    if (!props.isAuth) return <Redirect to={'/login'}/>;\n\n    return (\n        <div className={s.dialogs}>\n            <div className={s.dialogs_items}>\n                {dialogsElements}\n            </div>\n            <div className={s.messages}>\n                <div>{messagesElements}</div>\n               <AddMessageFormRedux onSubmit={addMessage}/>\n\n            </div>\n        </div>\n\n    );\n};\n\nexport default Dialogs;\n","import Dialogs from \"./Dialogs\";\nimport {MessageType} from \"./Message/Message\";\nimport {RootStateType} from \"../../redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {sendMessageAC} from \"../../redux/dialogs-reducer\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {connect} from \"react-redux\";\nimport {DialogType} from \"./Dialog/Dialog\";\nimport React from \"react\";\n\ntype mapStateToPropsType = {\n    dialogs: Array<DialogType>,\n    messages: Array<MessageType>,\n    isAuth: boolean,\n}\n\ntype mapDispatchToPropsType = {\n    sendMessage: (newMessageBody: string) => void,\n}\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogsData,\n        messages: state.dialogsPage.messagesData,\n        isAuth: state.auth.isAuth,\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        sendMessage: (newMessageBody) => {\n            dispatch(sendMessageAC(newMessageBody))\n        }\n    }\n}\n\nexport default compose<React.ComponentType>(\n    withAuthRedirect,\n    connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps),\n)(Dialogs);","import {Redirect} from \"react-router-dom\";\nimport {RootStateType} from \"../redux/redux-store\";\nimport {Component, ComponentType} from \"react\";\nimport {connect} from \"react-redux\";\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T extends Component>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","props","text","Field","validate","maxLength","path","id","s","src","avatar","alt","to","message","required","value","maxLength50","length","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","row","type","shape","htmlType","dialogsElements","dialogs","map","d","messagesElements","m","Message","isAuth","values","sendMessage","newMessageBody","compose","withAuthRedirect","connect","state","dialogsPage","dialogsData","messages","messagesData","auth","dispatch","sendMessageAC","Dialogs","mapStateToProps","Component"],"sourceRoot":""}