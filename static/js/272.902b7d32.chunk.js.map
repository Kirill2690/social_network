{"version":3,"file":"static/js/272.902b7d32.chunk.js","mappings":"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","sources":["components/common/forms/FormsControls.tsx","webpack://my_social_network/./src/components/profile/ProfileInfo/ProfileInfo.module.css?1833","webpack://my_social_network/./src/components/profile/ProfileInfo/ProfileStatusWithHooks.module.css?162a","components/profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/ProfileDataForm.tsx","../node_modules/@ant-design/icons-svg/es/asn/DownloadOutlined.js","../node_modules/@ant-design/icons/es/icons/DownloadOutlined.js","components/profile/ProfileInfo/ProfileInfo.tsx","webpack://my_social_network/./src/components/profile/MyPosts/MyPosts.module.css?21c2","webpack://my_social_network/./src/components/profile/MyPosts/Post/Post.module.css?3dca","components/profile/MyPosts/Post/Post.tsx","webpack://my_social_network/./src/components/profile/MyPosts/AddNewPostForm/AddNewPostForm.module.css?65f1","components/profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/MyPosts/MyPostsContainer.tsx","webpack://my_social_network/./src/components/profile/Profile.module.css?5246","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/withAuthRedirect.tsx","utils/validators/validators.tsx","webpack://my_social_network/./src/components/common/forms/FormControls.module.css?8e07"],"sourcesContent":["import React from 'react';\nimport styles from './FormControls.module.css'\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps,\n    children?: React.ReactNode\n\n}\n\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\n\n    const hasError = touched && error\n    return (\n        <div className={styles.formControl + ' ' + (hasError ? styles.error : '')}>\n            <div>\n                {children}\n            </div>\n            {hasError && <span>{error}</span>}\n        </div>\n    )\n}\n\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n\n    return (\n        <FormControl meta={meta}> <textarea {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...restProps}) => {\n    return (\n        <FormControl meta={meta}> <input {...input} {...restProps}/> </FormControl>\n    )\n}\n\nexport const createField = (placeholder: string | null, name: string, validators: ((value: string) => string | undefined)[], component: React.FC<WrappedFieldProps>, props = {}, text = '') => (\n    <div>\n        <Field placeholder={placeholder}\n               name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n)","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aij2N\",\"profileImg\":\"ProfileInfo_profileImg__KUsNK\",\"avatar\":\"ProfileInfo_avatar__rNjSN\",\"mainPhoto\":\"ProfileInfo_mainPhoto__wpuJQ\",\"contact\":\"ProfileInfo_contact__MRxHV\"};","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatusWithHooks_status__3xubF\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\nimport {Input} from 'antd';\nimport styles from './ProfileStatusWithHooks.module.css'\n\ntype ProfileStatusPropsType = {\n    status: string\n    updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\n    const [editMode, setEditMode] = useState(false);\n    const [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div className={styles.status}>\n            {!editMode &&\n                < div>\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}> {props.status || '-----'}</span>\n                </div>\n            }\n            {editMode &&\n                <div>\n                    <Input onChange={onStatusChange} autoFocus onBlur={deactivateEditMode} value={status}/>\n                </div>\n            }\n        </div>\n    );\n}\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport {createField, Input, Textarea} from '../../common/forms/FormsControls';\nimport {InjectedFormProps, reduxForm} from 'redux-form';\nimport s from './ProfileInfo.module.css'\nimport style from '../../common/forms/FormControls.module.css';\nimport {ProfileType} from '../ProfileContainer';\nimport {Button} from 'antd';\n\nconst ProfileDataForm = (props: InjectedFormProps<ProfileType>) => {\n    const {handleSubmit, initialValues, error} = props\n    return <form onSubmit={handleSubmit}>\n        <div>\n            <Button type=\"default\" shape=\"round\" onClick={handleSubmit}>save</Button>\n            {error && <div className={style.formSummaryError}>\n                {error}\n            </div>}\n        </div>\n        <div>\n            <b>Full name: </b> {createField('Full name', 'fullName', [], Input)}\n        </div>\n        <div>\n            <b>Looking For A Job: </b> {createField('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\n        </div>\n\n        <div>\n            <b>My professional\n                skills: </b> {createField('My professional skills', 'lookingForAJobDescription', [], Textarea)}\n        </div>\n        <div>\n            <b>About me: </b> {createField('About me', 'aboutMe', [], Textarea)}\n        </div>\n        <div>\n            <b>Contacts: </b> {Object.keys(initialValues.contacts ?? {}).map(key => {\n            return <div key={key} className={s.contact}>\n                <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType>({form: 'edit-profile'})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm;","// This icon file is generated automatically.\nvar DownloadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M505.7 661a8 8 0 0012.6 0l112-141.7c4.1-5.2.4-12.9-6.3-12.9h-74.1V168c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v338.3H400c-6.7 0-10.4 7.7-6.3 12.9l112 141.8zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"download\", \"theme\": \"outlined\" };\nexport default DownloadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport DownloadOutlinedSvg from \"@ant-design/icons-svg/es/asn/DownloadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar DownloadOutlined = function DownloadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: DownloadOutlinedSvg\n  }));\n};\n\nDownloadOutlined.displayName = 'DownloadOutlined';\nexport default /*#__PURE__*/React.forwardRef(DownloadOutlined);","import React, {useRef, useState} from 'react';\nimport s from './ProfileInfo.module.css'\nimport {Preloader} from '../../common/preloader/Preloader';\nimport {ContactsType, ProfileType} from '../ProfileContainer';\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\nimport userPhoto from '../../../assets/images/user.png';\nimport ProfileDataForm from './ProfileDataForm';\nimport {Button} from 'antd';\nimport {DownloadOutlined} from '@ant-design/icons';\n\ntype ProfileInfoPropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\nconst ProfileInfo: React.FC<ProfileInfoPropsType> = ({\n                                                         profile,\n                                                         status,\n                                                         updateStatus,\n                                                         isOwner,\n                                                         savePhoto,\n                                                         saveProfile\n                                                     }) => {\n    const ref = useRef<HTMLInputElement>(null);\n\n    const [editMode, setEditMode] = useState(false);\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const onMainPhotoSelected = (e: { target: any }) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0])\n        }\n    }\n\n    const onSubmit = (formData: ProfileType | null) => {\n        saveProfile(formData)\n        setEditMode(false)\n    }\n\n    return (\n        <div>\n            <div className={s.descriptionBlock}>\n                <div className={s.avatar}>\n                    <img src={profile.photos?.large || userPhoto} className={s.mainPhoto} alt={'large avatar'}/>\n                </div>\n                <div>\n                    <Button\n                        type=\"default\"\n                        shape=\"circle\"\n                        icon={<DownloadOutlined/>}\n                        onClick={() => ref.current?.click()}\n                    />\n                </div>\n                {isOwner &&\n                    <input\n                        type={'file'}\n                        onChange={onMainPhotoSelected}\n                        ref={ref}\n                        style={{display: 'none'}}\n                    />\n                }\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\n                {editMode\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit}/>\n                    : <ProfileData goToEditMode={() => {\n                        setEditMode(true)\n                    }} profile={profile} isOwner={isOwner}/>}\n            </div>\n        </div>\n    );\n};\n\ntype ContactType = {\n    contactTitle: string\n    contactValue: string\n}\n\ntype ProfileDataType = {\n    profile: ProfileType\n    isOwner: boolean\n    goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\n    return <div>\n        {isOwner && <div>\n            <Button type=\"default\" shape=\"round\" onClick={goToEditMode}>edit</Button>\n        </div>}\n        <div>\n            <b>Full name: </b> {profile.fullName}\n        </div>\n        <div>\n            <b>Looking For A Job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\n        </div>\n        {profile.lookingForAJob &&\n            <div>\n                <b>My professional skills: </b> {profile.lookingForAJobDescription}\n            </div>}\n        <div>\n            <b>About Me: </b> {profile.aboutMe}\n        </div>\n        <div>\n            <b>Contacts: </b> {profile.contacts && Object.keys(profile.contacts).map(key => {\n\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\nconst Contact: React.FC<ContactType> = ({contactTitle, contactValue}) => {\n    return <div className={s.contact}><b>{contactTitle}: </b> {contactValue}</div>\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__1QT53\",\"posts\":\"MyPosts_posts__E-Bcs\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__b5JHE\"};","import React from 'react';\nimport s from './Post.module.css';\n\nexport type PostsType = {\n    id: number\n    message: string\n    likesCount: number\n}\n\nconst Post = (props: PostsType) => {\n\n    return (\n        <div className={s.item}>\n            <img src={'https://www.meme-arsenal.com/memes/be50e6ba99654b5455027dcc82beb5b3.jpg'} alt={'ava'}/>\n            { props.message }\n            <div>\n                <span>like</span> { props.likesCount }\n            </div>\n        </div>\n    );\n}\n\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AddNewPostForm_container__4mOth\"};","import React, {FC} from 'react';\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\nimport {Textarea} from '../../../common/forms/FormsControls';\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators';\nimport {Button} from 'antd';\nimport styles from './AddNewPostForm.module.css'\n\ntype MyPostFormPropsType = {\n    newPostText: string\n}\nconst maxLength30 = maxLengthCreator(30);\nconst AddNewPostForm: FC<InjectedFormProps<MyPostFormPropsType>> = (props) => {\n\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div className={styles.container}>\n                <Field\n                    component={Textarea}\n                    name={'newPostText'}\n                    validate={[required, maxLength30]}\n                    placeholder={'Post message'}\n                    rows={3}\n                />\n                <div>\n                    <Button htmlType={'submit'} type={'default'} shape={'round'}>Add post</Button>\n                </div>\n            </div>\n        </form>\n    )\n}\nexport const AddNewPostFormRedux = reduxForm<MyPostFormPropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post, {PostsType} from './Post/Post';\nimport {AddNewPostFormRedux} from './AddNewPostForm/AddNewPostForm';\n\ntype PropsType = {\n    posts: Array<PostsType>\n    messageForNewPost: string\n    addPost: (postMessage: string) => void\n}\n\nconst MyPosts = React.memo((props: PropsType) => {\n\n    const postsElements = [...props.posts]\n        .reverse()\n        .map(p => <Post key={p.id} id={p.id} message={p.message}\n                        likesCount={p.likesCount}/>)\n\n    const onAddPost = (values: { newPostText: string }) => {\n        props.addPost(values.newPostText)\n        values.newPostText = ''\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n\n    );\n})\n\nexport default MyPosts;","import MyPosts from './MyPosts';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../../redux/redux-store';\nimport {Dispatch} from 'redux';\nimport {PostsType} from './Post/Post';\nimport {addPost} from '../../../redux/profile-reducer';\n\ntype mapStateToPropsType = {\n    posts: Array<PostsType>\n    messageForNewPost: string\n}\n\ntype mapDispatchToPropsType = {\n    addPost: (newPostText: string) => void\n}\n\n\nlet mapStateToProps = (state: RootStateType): mapStateToPropsType => {\n    return {\n        posts: state.profilePage.posts,\n        messageForNewPost: state.profilePage.messageForNewPost\n    }\n}\n\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n    return {\n        addPost: (newPostText: string) => {\n            dispatch(addPost(newPostText))\n        },\n    }\n}\n\nconst MyPostsContainer = connect<mapStateToPropsType, mapDispatchToPropsType, {}, RootStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Profile_container__k9HcY\"};","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport {ProfileType} from './ProfileContainer';\nimport styles from './Profile.module.css'\n\ntype ProfilePropsType = {\n    profile: ProfileType | null\n    status: string\n    updateStatus: (status: string) => void\n    isOwner: boolean\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div className={styles.container}>\n            <ProfileInfo\n                savePhoto={props.savePhoto}\n                isOwner={props.isOwner}\n                profile={props.profile}\n                status={props.status}\n                saveProfile={props.saveProfile}\n                updateStatus={props.updateStatus}/>\n            <MyPostsContainer/>\n        </div>\n    );\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../../redux/redux-store';\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from '../../redux/profile-reducer';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\nimport {compose} from 'redux';\n\nexport type ProfileType = {\n    aboutMe?: string\n    contacts: ContactsType\n    lookingForAJob?: boolean\n    lookingForAJobDescription?: string\n    fullName?: string\n    userId?: number\n    photos?: PhotosType\n}\n\nexport type ContactsType = {\n    facebook: string\n    website: string\n    vk: string\n    twitter: string\n    instagram: string\n    youtube: string\n    github: string\n    mainLink: string\n}\n\nexport type PhotosType = {\n    small: string\n    large: string\n}\n\ntype MapStatePropsType = {\n    profile: ProfileType | null\n    status: string\n    authorizedUserId: number | null\n    isAuth: boolean\n}\n\ntype MapDispatchPropsType = {\n    getUserProfile: (userId: number | null) => void\n    getStatus: (status: string) => void\n    updateStatus: (status: string) => void\n    savePhoto: (file: string) => void\n    saveProfile: (profile: ProfileType | null) => void\n}\n\ntype PathParamsType = {\n    userId: string\n}\n\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\n\ntype PropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\nclass ProfileContainer extends React.Component<PropsType> {\n\n    refreshProfile() {\n        let userId: string | undefined = this.props.match.params.userId;\n        if (!userId) {\n\n            userId = this.props.authorizedUserId?.toString()\n            if (!userId) {\n                return this.props.history.push('/login');\n            }\n        }\n\n\n        this.props.getUserProfile(Number(userId))\n        this.props.getStatus(userId)\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\n            this.refreshProfile()\n    }\n\n    render() {\n\n        return (\n            <Profile {...this.props}\n                     isOwner={!this.props.match.params.userId}\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatus={this.props.updateStatus}\n                     savePhoto={this.props.savePhoto}\n            />\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateType): MapStatePropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n});\n\nexport default compose<React.ComponentType>(\n    connect<MapStatePropsType, MapDispatchPropsType, {}, RootStateType>(mapStateToProps, {\n        getUserProfile,\n        getStatus,\n        updateStatus,\n        savePhoto,\n        saveProfile,\n    }),\n    withRouter,\n    withAuthRedirect,\n)(ProfileContainer);","import React, {Component,ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {RootStateType} from '../redux/redux-store';\n\ntype MapStateToPropsType = {\n    isAuth: boolean\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateToPropsType => {\n\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function withAuthRedirect<T extends Component>(Component: ComponentType<T>) {\n\n    const RedirectComponent = (props: MapStateToPropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) return <Redirect to={'/login'}/>\n        return <Component {...restProps as T}/>\n    }\n\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedRedirectComponent\n}","export const required = (value: string) => {\n    if (value) return undefined;\n    return 'Field is required';\n}\n\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\n    return undefined;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormControls_formControl__nfj+-\",\"error\":\"FormControls_error__uAfpp\",\"formSummaryError\":\"FormControls_formSummaryError__nMr6e\"};"],"names":["FormControl","meta","touched","error","children","hasError","className","styles","Textarea","input","restProps","Input","createField","placeholder","name","validators","component","props","text","validate","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","reduxForm","form","handleSubmit","initialValues","onSubmit","type","shape","onClick","style","Object","keys","contacts","map","key","s","DownloadOutlined","ref","React","AntdIcon","_objectSpread","icon","DownloadOutlinedSvg","displayName","ProfileData","profile","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","useRef","Preloader","src","photos","large","userPhoto","alt","current","click","target","files","length","display","formData","message","likesCount","maxLength30","maxLengthCreator","AddNewPostFormRedux","Field","required","rows","htmlType","postsElements","posts","reverse","p","id","values","addPost","newPostText","connect","state","profilePage","messageForNewPost","dispatch","MyPosts","ProfileContainer","userId","this","match","params","authorizedUserId","toString","history","push","getUserProfile","Number","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","withRouter","withAuthRedirect","mapStateToProps","Component","to","maxLength"],"sourceRoot":""}